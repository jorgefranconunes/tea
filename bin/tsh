#!/bin/bash
###########################################################################
#
# Copyright (c) 2001-2014 PDMFC, All Rights Reserved.
#
#
# Executes a Tea script read from a file or from stdin. Run with
# the --help option for more details.
#
###########################################################################

_scriptDir=$(dirname $0)
_scriptName=$(basename $0)

_teaBaseDir=$(cd $_scriptDir/..; pwd)





source ${_teaBaseDir}/lib/bash/tea-utils.sh

teaLoadCoreConfig ${_teaBaseDir}





TEA_CORE_LIBRARY="."
TEA_CORE_CLASSPATH="${_teaBaseDir}/lib/jars/tea-runner-${TEA_VERSION}.jar"

_teaLibrary=${TEA_CORE_LIBRARY}
_teaClasspath=$(teaNormalizePath ${TEA_CORE_CLASSPATH})
_teaJre=${TEA_JRE}
_teaJreOptions=""
_teaScript=""
_encoding=""
_encodingOptions=""
_helpEnabled=true
_pathSep=$(teaPathSeparator)
_argCountToSkip=0





###########################################################################
#
# 
#
###########################################################################

function displayHeader() {

    cat <<EOF
Tea ${TEA_VERSION}
Copyright (c) 2001-2014 PDMFC, All Rights Reserved.

EOF
}





###########################################################################
#
# Displays the help message.
#
###########################################################################

function displayHelp() {

    displayHeader

    cat <<EOF
Runs a Tea script either from a file or from standard input. The
command line arguments are as follows:

tsh [option ...] [script-file] [arg ...]

Available options:

--library=DIRLIST
        Colon separated list of directory pathnames or URLs. These are
        the locations where the Tea 'import' function will look for
        files. In the case of an URL all the colons must be replaced
        by the '|' character. This option is not mandatory.

--classpath=DIRLIST
        Colon separated list of directories or JAR files pathnames. These
        will be added to the CLASSPATH of the JVM running the Tea script.
        This option is needed when using external Java libraries (e.g. for
        a JDBC driver). This option is not mandatory.

--jre=PATH
        Path to your Java runtime environment executable. It must accept
        the "-classpath" and "-D" options. This option is not mandatory.
        When not specified it will default to \${JAVA_HOME}/bin/java.

--jre-options=STRING
        Set of options passed as argument to the JRE. This option is
        not mandatory. It defaults to an empty string, that is, the JRE
        is invoked with no aditional options.

--encoding=ENC
        Specifies the encoding of the Tea source files (e.g. UTF-8,
        ISO-8859-15).  If this option is not specified then the
        platform default encoding is assumed.

--script=PATH
        The file system path of the Tea script to execute. This option
        is not mandatory. If not specified then the path will be taken
        as the first argument following the known options.

--
        Ignore all remaining arguments and pass them as command line
        argument to the Tea script. If the --script option was not
        specified prior to this one then the script will be read from
        stdin.

--version
        Print version information and exits.

--help
        Prints this help text and exits.
                  
EOF
}





###########################################################################
#
# Parse the command line arguments.
#
###########################################################################

function parseCliOptions () {

    for option in "$@" ; do
        case "${option}" in
            --script=* )
                _teaScript=$(expr "${option}" : '--script=\(.*\)')
                ;;
            --library=* )
                local item=$(expr "${option}" : '--library=\(.*\)')
                if   [ -z "${_teaLibrary}" ] ; then
                    _teaLibrary=${item}
                else
                    _teaLibrary=${item}${_pathSep}${_teaLibrary}
                fi
                ;;
            --classpath=* )
                local item=$(expr "${option}" : '--classpath=\(.*\)')
                if [ -z "${_teaClasspath}" ] ; then
                    _teaClasspath=${item}
                else
                    _teaClasspath=${item}${_pathSep}${_teaClasspath}
                fi
                ;;
            --jre=* )
                _teaJre=$(expr "${option}" : '--jre=\(.*\)')
                ;;
            --jre-options=* )
                local item=$(expr "${option}" : '--jre-options=\(.*\)')
                if [ -z "${_teaJreOptions}" ] ; then
                    _teaJreOptions=${item}
                else
                    _teaJreOptions="${item} ${_teaJreOptions}"
                fi
                ;;
            --encoding=* )
                _encoding=$(expr "${option}" : '--encoding=\(.*\)')
                ;;
            --version )
                if [ ${_helpEnabled} == true ] ; then
                    displayHeader
                    exit 0
                else
                    # End of options.
                    break
                fi
                ;;
            --help )
                if [ ${_helpEnabled} == true ] ; then
                    displayHelp
                    exit 0
                else
                    # End of options.
                    break
                fi
                ;;
            --no-help )
                _helpEnabled=false
                ;;
            -- )
                # End of options.
                _argCountToSkip=$(expr ${_argCountToSkip} + 1)
                break
                ;;
            * )
                # End of options.
                break
                ;;
            esac
        
        shift
        _argCountToSkip=$(expr ${_argCountToSkip} + 1)
    done

    if [ -z "${_teaScript}" ] ; then
        # As no script was explicitly specified, the first argument
        # after the options is the path of the Tea script to be run.
        _teaScript="$1"

        shift
        _argCountToSkip=$(expr ${_argCountToSkip} + 1)
    fi

    if [ ! -z "${_encoding}" ] ; then
        _encodingOptions="--encoding=${_encoding}"
    fi
}





###########################################################################
#
# 
#
###########################################################################

function performChecks () {

    if [ -z "$_teaJre" ] ; then
        if [ -z "${JAVA_HOME}" ] ; then
            teaError "JAVA_HOME not set and --jre missing."
        fi

        _teaJre=${JAVA_HOME}/bin/java

        if [ ! -x "${_teaJre}" ] ; then
            teaError "Could not find JRE under JAVA_HOME=${JAVA_HOME}"
        fi
    else
        if [ ! \( -f "${_teaJre}" -a -x "${_teaJre}" \) ] ; then
            teaError "Unable to find JRE binary at \"${_teaJre}\""
        fi
    fi
}





###########################################################################
#
# The main script.
#
###########################################################################

parseCliOptions "$@"
performChecks

#
# Skip the original CLI arguments that were processed by
# parseCliOptions.
#
while [ ${_argCountToSkip} -gt 0 ] ; do
    shift
    _argCountToSkip=$(expr ${_argCountToSkip} - 1)
done

#
# And execute the Java tool for running a Tea script from a file.
#
exec "$_teaJre" \
    $_teaJreOptions \
    -classpath "$_teaClasspath" \
    com.pdmfc.tea.tools.runner.TeaRunner \
    --library="$_teaLibrary" \
    --script="$_teaScript" \
    $_encodingOptions \
    -- \
    "$@"





###########################################################################
#
# 
#
###########################################################################

