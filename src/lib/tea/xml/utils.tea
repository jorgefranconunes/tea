###########################################################################
#
# Copyright (c) 2001 PDM&FC, All Rights Reserved.
#
###########################################################################

###########################################################################
#
# $Id: utils.tea,v 1.3 2002/08/02 17:47:25 jfn Exp $
#
# Revisions:
#
# 2002/04/08
# Created. (jfn)
#
###########################################################################





###########################################################################
## 
## <TeaFunction name="xml-get-first-element"
## 		arguments="root"
##              module="tea.xml">
##
## <Overview>
## Retrieves the first child node that is an element.
## </Overview>
##
## <Parameter name="root">
## The element among whose child nodes an element will be looked for.
## </Parameter>
##
## <Returns>
## The first child node of <Arg name="root"/> that is an element.
## Null if <Arg name="root"/> has not an element among its children
## nodes.
## </Returns>
##
## <Description>
## Looks among the child nodes of the <Arg name="root"/> element and
## locates the first occurrence of an element.
##
## <P>This function is usefull to retrieve a known occurrence of an
## element that might be surrounded by text nodes.</P>
## </Description>
## 
## </TeaFunction>
## 
###########################################################################

global xml-get-first-element ( root ) {
    
    define result         $null
    define children       [$root getChildren]
    define stillSearching [not-empty? $children]
    
    while { is $stillSearching } {
        define node [car $children]
        if { same? Element [$node getNodeType] } {
            set! result $node
        } {
            set! children [cdr $children]
        }
        set! stillSearching [and {not-empty? $children} {null? $result}]
    }
    
    is $result
}





###########################################################################
## 
## <TeaFunction name="xml-get-first-element-named"
## 		arguments="root name"
##              module="tea.xml">
##
## <Overview>
## Retrieves the first child node that is an element with a given
## tag name.
## </Overview>
##
## <Parameter name="root">
## The element among whose child nodes an element will be looked for.
## </Parameter>
## 
## <Parameter name="name">
## The tag name of the element to look for.
## </Parameter>
##
## <Returns>
## The first child node of <Arg name="root"/> that is an element with
## the given tag name.
## Null if <Arg name="root"/> has not an element with that tag name
## among its children
## nodes.
## </Returns>
##
## <Description>
## Looks among the child nodes of the <Arg name="root"/> element and
## locates the first occurrence of an element with a tag name of
## <Arg name="name"/>.
##
## <P>This function is usefull to retrieve a known occurrence of an
## element that might be surrounded by text nodes or other elements.</P>
## </Description>
## 
## </TeaFunction>
## 
###########################################################################

global xml-get-first-element-named ( root name ) {
    
    define result         $null
    define children       [$root getChildren]
    define stillSearching [not-empty? $children]
    
    while { is $stillSearching } {
        define node [car $children]
        if { and \
                {same? Element [$node getNodeType]} \
                {str== $name [$node getTagName] } } {
            set! result $node
        } {
            set! children [cdr $children]
        }
        set! stillSearching [and {not-empty? $children} {null? $result}]
    }
    
    is $result
}





###########################################################################
## 
## <TeaFunction name="xml-get-next-element"
## 		arguments="node"
##              module="tea.xml">
##
## <Overview>
## Retrieves the first element following the given node.
## </Overview>
##
## <Parameter name="node">
## The node among whose left siblings an element will be looked for.
## </Parameter>
##
## <Returns>
## The first left sibling node of <Arg name="node"/> that is an element.
## Null if <Arg name="node"/> has not an element among its left
## node siblings.
## </Returns>
##
## <Description>
## Looks among the left child nodes of <Arg name="node"/> and
## locates the first occurrence of an element.
##
## <P>This function is usefull to retrieve a known occurrence of an
## element that might be surrounded by text nodes.</P>
## </Description>
## 
## </TeaFunction>
## 
###########################################################################

global xml-get-next-element ( node ) {
    
    define result         $null
    define sibling        [$node getNextSibling]
    define stillSearching [not-null? $sibling]
    
    while { is $stillSearching } {
        if { same? Element [$sibling getNodeType] } {
            set! result $sibling
        } {
            set! sibling [$sibling getNextSibling]
        }
        set! stillSearching [and {not-null? $sibling} {null? $result}]
    }
    
    is $result
}





###########################################################################
## 
## <TeaFunction name="xml-get-next-element-named"
## 		arguments="node name"
##              module="tea.xml">
##
## <Overview>
## Retrieves the first element with a given tag name following the given
## node.
## </Overview>
##
## <Parameter name="node">
## The node among whose child nodes an element with the fiven tag name
## will be looked for.
## </Parameter>
## 
## <Parameter name="name">
## The tag name of the element to look for.
## </Parameter>
##
## <Returns>
## The first node following <Arg name="node"/> that is an element with
## the given tag name.
## Null if <Arg name="node"/> has no following element with that tag name
## </Returns>
##
## <Description>
## Looks among the nodes following <Arg name="node"/> and
## locates the first occurrence of an element with a tag name of
## <Arg name="name"/>.
##
## <P>This function is usefull to retrieve a known occurrence of an
## element that might be surrounded by text nodes or other elements.</P>
## </Description>
## 
## </TeaFunction>
## 
###########################################################################

global xml-get-next-element-named ( node name ) {
    
    define result         $null
    define sibling        [$node getNextSibling]
    define stillSearching [not-null? $sibling]
    
    while { is $stillSearching } {
        if { and \
                {same? Element [$sibling getNodeType]} \
                {str== $name [$sibling getTagName]} } {
            set! result $sibling
        } {
            set! sibling [$sibling getNextSibling]
        }
        set! stillSearching [and {not-null? $sibling} {null? $result}]
    }
    
    is $result
}





###########################################################################
#
# 
#
###########################################################################

