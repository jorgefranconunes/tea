###########################################################################
#
# Copyright (c) 2009 PDM&FC, All Rights Reserved.
#
###########################################################################

###########################################################################
#
# $Id$
#
# Utility functions for list manipulation.
#
#
# Revisions:
#
# 2009/03/11 Created. (jfn)
#
###########################################################################





#########################################################################
##
## <TeaFunction name="list-cat"
##              arguments="[list1] ..."
##              module="tea.lists">
## 
## <Overview>
## Concatenates lists.
## </Overview>
## 
## <Parameter name="list1">
## A list.
## </Parameter>
##
## <Returns>
## A new list containing all the elements of the lists given as argument.
## </Returns>
## 
## <Description>
## Creates a new list obtained by concatenating the elements of the
## lists given as arguments.
## <p>If no argument is given then an empty list is returned.</p>
## </Description>
##
## </TeaFunction>
##
#########################################################################

global list-cat args {
    
    define head  ()
    define tail  $head
    
    foreach aList $args {
        foreach item $aList {
            define newEmpty ()
            set-car! $tail $item
            set-cdr! $tail $newEmpty
            set! tail $newEmpty
        }
    }
    
    is $head
}


#
# This is the recursive version. Prettier, but heavy on the Java
# small stack...
#

# global list-cat args  {
    
#     define l1   [car $args]
#     define rest [cdr $args]
    
#     if { empty? $rest } {
#         is $l1
#     } {
#         cat-two-lists $l1 [apply list-cat $rest]
#     }
# }


# define cat-two-lists ( l1 l2 ) {
    
#     if { empty? $l1 } {
#         is $l2
#     } {
#         define h1 [car $l1]
#         prepend $h1 [cat-two-lists [cdr $l1] $l2]
#     }
# }





#########################################################################
##
## <TeaFunction name="list-invert"
##              arguments="list"
##              module="tea.lists">
## 
## <Overview>
## Reverses the order of the elements of a list.
## </Overview>
## 
## <Parameter name="list">
## A list.
## </Parameter>
##
## <Returns>
## A new list containing all the elements of the list given as argument
## in the reverse order.
## </Returns>
## 
## <Description>
## 
## </Description>
##
## </TeaFunction>
##
#########################################################################

global list-invert ( l ) {
    
    if { empty? $l } {
        is ()
    } {
        list-do-invert $l ()
    }
}


define list-do-invert ( l buffer ) {
    
    if { not-empty? $l } {
        list-do-invert [cdr $l] [prepend [car $l] $buffer]
    } {
        is $buffer
    }
}





#########################################################################
##
## <TeaFunction name="list-sort"
##              arguments="list sort-function"
##              module="tea.lists">
## 
## <Overview>
## Sorts a list.
## </Overview>
## 
## <Parameter name="list">
## A list.
## </Parameter>
## 
## <Parameter name="sort-function">
## The function to be used for comparing elements of the list.
## </Parameter>
##
## <Returns>
## A new list containing all the elements of the list given as argument
## sorted acording to the given comparison function.
## </Returns>
## 
## <Description>
## The comparison function must accepts two arguments and return an
## integer value. It will be called having as actual arguments elements in
## the given list. It is supposed to return a negative, zero
## or positive value if the first argument is less, equal or greater than
## the first, respectively.
## 
## </Description>
##
## </TeaFunction>
##
#########################################################################

global list-sort ( l sort-function ) {
    
    if { not-empty? $l } {
        [[apply [new TVector] append $l] sort $sort-function] getElements
    } {
        is ()
    }
}





#########################################################################
#
# 
#
#########################################################################

