###########################################################################
#
# Copyright (c) 2013 PDMFC, All Rights Reserved.
#
#
# TUnit tests for functions in the tea.lang module.
#
###########################################################################





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite apply-test {

    tunit-test applyOk {
        tunit-assert-equals 0 [apply count-args]
        tunit-assert-equals 0 [apply $count-args]
        tunit-assert-equals 0 [apply $count-args ()]
        
        tunit-assert-equals 1 [apply $count-args "1"]
        tunit-assert-equals 1 [apply $count-args "1" ()]
        tunit-assert-equals 1 [apply $count-args ( "1" )]
        
        tunit-assert-equals 2 [apply $count-args "1" "2"]
        tunit-assert-equals 2 [apply $count-args "1" "2" ()]
        tunit-assert-equals 2 [apply $count-args "1" ( "2" )]
        tunit-assert-equals 2 [apply $count-args ( "1" "2" )]
        
        tunit-assert-equals 3 [apply $count-args "1" "2" "3"]
        tunit-assert-equals 3 [apply $count-args "1" "2" "3" ()]
        tunit-assert-equals 3 [apply $count-args "1" "2" ( "3" )]
        tunit-assert-equals 3 [apply $count-args "1" ( "2" "3" )]
        tunit-assert-equals 3 [apply $count-args ( "1" "2" "3" )]
    }

    tunit-test-error tooFewArgs {
        apply
    }

    tunit-test-error invalidArgType {
        apply $null
    }
    
    tunit-test-error unknownFunction {
        apply nonexisting-function
    }
    
    
    define count-args args {
        length $args
    }

}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite break-test {
    
    
    tunit-test breakInFunction {
        tunit-assert-null [function-with-break]
        tunit-assert-equals "Hello" [function-with-break "Hello"]
    }
    
    
    tunit-test breakInForeach {
        tunit-assert-null [foreach-with-break]
        tunit-assert-equals "Hello" [foreach-with-break "Hello"]
    }
    
    
    tunit-test breakInWhile {
        tunit-assert-null [while-with-break]
        tunit-assert-equals "Hello" [while-with-break "Hello"]
    }
    
    
    tunit-test-error tooManyArgs {
        break 1 2
    }
    
    
    define function-with-break args {
        
        apply break $args
        tunit-fail "Should not be here..."
    }
    
    
    define foreach-with-break args {
        
        define myList   ( 0 1 2 3 4 5 6 7 8 9 10 )
        define index    0
        define maxIndex 5
        
        foreach item $myList {
            if { == $index $maxIndex } {
                apply break $args
            }
            if { > $index $maxIndex } {
                tunit-fail "Break in foreach failed"
            }
            ++ index
        }
    }
    
    
    define while-with-break args {
        
        define maxCount 10
        define index    0
        define maxIndex 5
        
        while { < $index $maxCount } {
            if { == $index $maxIndex } {
                apply break $args
            }
            if { > $index $maxIndex } {
                tunit-fail "Break in while failed"
            }
            ++ index
        }
    }
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite catch-test {
    
    
    tunit-test-error tooFewArgs {
        catch
    }
    
    
    tunit-test-error tooManyArgs {
        catch {} stuff moreStuff evenMoreStuff
    }
    
    tunit-test-error invalidArgType1 {
        catch ""
    }
    
    tunit-test-error invalidArgType2 {
        catch {} ""
    }
    
    tunit-test-error invalidArgType3 {
        catch {} stuff ""
    }
    
    
    tunit-test catchNoError1 {
        define catchResult [catch {}]
        
        tunit-assert [not $catchResult]
    }
    
    
    tunit-test catchNoError2 {
        define result      $null
        define catchResult [catch {is 123} result]
        
        tunit-assert [not $catchResult]
        tunit-assert-equals 123 $result
    }
    
    
    define test-catch-no-error ( testName expectedValue block ) {
        
        tunit-test $testName {
            define result        $null
            define stackTraceStr $null
            define catchResult   [catch $block result stackTraceStr]
        
            tunit-assert [not $catchResult]
            tunit-assert-equals $expectedValue $result
            tunit-assert-null $stackTraceStr
        }
    }
    
    
    tunit-test-error catchNoError2a {
        catch {is 1234} UNDEFINED_VAR
    }
    
    
    tunit-test-error catchNoError2b {
        define result $null
        catch {is 1234} result OTHER_UNDEFINED_VAR
    }
    
    
    test-catch-no-error catchNoError3 12345 { is 12345 }
    
    
    test-catch-no-error catchNoError4 123456 { return 123456 }
    
    
    test-catch-no-error catchNoError5 "InBreak" { break "InBreak" }
    
    
    test-catch-no-error catchNoError6 $null { continue }
    
    
    tunit-test catchWithError1 {
        define myMsg "Whatever..."
        define result      $null
        define catchResult [catch {error $myMsg} result]
        
        tunit-assert $catchResult
        tunit-assert-equals $myMsg $result
    }
    
    
    define test-catch-with-error ( testName block ) {
        
        tunit-test $testName {
            define result      $null
            define stackTraceStr $null
            define catchResult [catch $block result stackTraceStr]
        
            tunit-assert $catchResult
            tunit-assert-not-null $result
            tunit-assert-not-null $stackTraceStr
        }
    }
    
    
    test-catch-with-error catchWithError2 { / 1 0 }
    
    
    test-catch-with-error catchWithError3 { get UNDEFINED_VAR }
    
    
    test-catch-with-error catchWithError4 {
        java-exec-method java.lang.Integer parseInt "hohoho"
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite cond-test {
    
    
    tunit-test-error tooFewArgs {
        cond
    }
    
    
    tunit-test-error invalidArgType {
        cond 1 2
    }
    
    
    define test-cond-no-error ( testName expectedValue argList ) {
        
        tunit-test $testName {
            define result     $null
            define condResult [apply cond $argList]
            
            tunit-assert-equals $expectedValue $condResult
        }
    }
    
    
    test-cond-no-error oneCond1 1 (
        $true 1
    )
    
    
    test-cond-no-error oneCond2 1 (
        { is $true } 1
    )
    
    
    test-cond-no-error oneCond3 1 (
        { is $true } { is 1 }
    )
    
    
    test-cond-no-error oneCondWithElse1 1 (
        $true 1 2
    )
    
    
    test-cond-no-error oneCondWithElse2 2 (
        $false 1 2
    )
    
    
    test-cond-no-error oneCondWithElse2 2 (
        $false 1 { is 2 }
    )
    
    
    test-cond-no-error nConds1 1 (
        $true 1 $true 2
    )
    
    
    test-cond-no-error nConds2 2 (
        $false 1 $true 2
    )
    
    
    test-cond-no-error nConds3 $null (
        $false 1 $false 2
    )
    
    
    tunit-test nConds4 {
        define counter 0
        define result [cond \
                { ++ counter ; is $false } 10 \
                { ++ counter ; is $true } 11 \
                { ++ counter ; is $true } 12 \
                13
            ]
            
        tunit-assert-equals 2 $counter
        tunit-assert-equals 11 $result
    }
    
    
    tunit-test nConds5 {
        define counter 0
        define result [cond \
                $false { ++ counter ; is 10 } \
                $true  { ++ counter ; is 11 } \
                $true  { ++ counter ; is 12 }\
                { ++ counter ; is 13 }
            ]
            
        tunit-assert-equals 1 $counter
        tunit-assert-equals 11 $result
    }
    
    
    test-cond-no-error allCondsFalseNoElse1 $null (
        $false 1
    )
    
    
    test-cond-no-error allCondsFalseNoElse2 $null (
        $false 1 $false 2
    )
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite continue-test {
    
    
    tunit-test allOk {
        
        continue
    }
    
    
    tunit-test-error tooManyArgs {
        
        continue 123
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite define-test {
    
    
    tunit-test-error tooFewArgs {
        
        define
    }
    
    
    tunit-test-error tooMayArgs {
        
        define one 2 3 4
    }
    
    
    tunit-test-error invalidArgType1 {
        
        define 1 2
    }
    
    
    tunit-test-error invalidArgType2 {
        
        define myVar 123 {}
    }
    
    
    tunit-test-error invalidArgType3 {
        
        define myVar () 123
    }
    
    
    tunit-test-error invalidArgType4 {
        
        define myVar whatever 123
    }
    
    
    tunit-test-error invalidArgType5 {
        
        define myVar ( 1 ) {}
    }
    
    
    tunit-test withoutVal {
        
        define myVar
        
        tunit-assert-null $myVar
    }
    
    
    tunit-test defineVar {
        
        define myVarInt 123
        tunit-assert-equals 123 $myVarInt
        
        define myVarStr "abc"
        tunit-assert-equals "abc" $myVarStr
    }
    
    
    tunit-test defineFuncFixedArgs1 {
        
        define myFunc () { is 123 }
        
        tunit-assert [function? $myFunc]
        tunit-assert-equals 123 [$myFunc]
    }
    
    
    tunit-test defineFuncFixedArgs2 {
        
        define myFunc ( arg ) { is $arg }
        
        tunit-assert [function? $myFunc]
        tunit-assert-equals 123 [$myFunc 123]
        tunit-assert-null [$myFunc $null]
    }
    
    
    tunit-test defineFuncVarArgs1 {
        
        define myFunc args { length $args }
        
        tunit-assert [function? $myFunc]
        tunit-assert-equals 0 [$myFunc]
        tunit-assert-equals 1 [$myFunc "hello"]
        tunit-assert-equals 2 [$myFunc "hello" "world"]
        tunit-assert-equals 3 [$myFunc "hello" "world" "goodbye"]
    }
    
    
    tunit-test defineFuncVarArgs2 {
        
        define myFunc args { is $args }
        
        tunit-assert [function? $myFunc]
        
        define result [$myFunc 4 3 2 1]
        
        tunit-assert-equals 4 [nth $result 0]
        tunit-assert-equals 3 [nth $result 1]
        tunit-assert-equals 2 [nth $result 2]
        tunit-assert-equals 1 [nth $result 3]
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite echo-test {
    
    
    tunit-test ok1 {
        
        tunit-assert-equals 0 [echo]
        tunit-assert-equals 1 [echo "one"]
        tunit-assert-equals 2 [echo "one" "two"]
        tunit-assert-equals 3 [echo "one" "two" "three"]
    }
    
    
    tunit-test ok2 {
        
        tunit-assert-equals 1 [echo 1]
        tunit-assert-equals 1 [echo 1.2]
        tunit-assert-equals 1 [echo $true]
    }
    
    
    tunit-test-error err1 {
        
        echo $null
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite error-test {
    
    
    tunit-test tooFewArgs {
        
        define msg $null
        
        tunit-assert [catch { error } msg]
        tunit-assert [matches? ".*message.*" $msg]
    }
    
    
    tunit-test tooManyArgs {
        
        define msg $null
        
        tunit-assert [catch { error "One" "Two" } msg]
        tunit-assert [matches? ".*message.*" $msg]
    }
    
    
    tunit-test-error invalidArgType {
        
        error 1
    }
    
    
    tunit-test allOk {
        
        define msg $null
        
        tunit-assert [catch { error "demo" } msg]
        tunit-assert-equals "demo" $msg
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite exec-test {
    
    
    tunit-test-error tooFewArgs {
        
        exec
    }
    
    
    tunit-test-error tooManyArgs {
        
        exec {} 123
    }
    
    
    tunit-test-error invalidArgType {
        
        exec 123
    }
    
    
    tunit-test allOk {
        
        define myVar $null
        define myResult [exec { set! myVar 123; is 1234 }]
        
        tunit-assert-equals 123 $myVar
        tunit-assert-equals 1234 $myResult
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite exit-test {
    
    
    tunit-test tooFewArgs {
        
        test-exit-with () 0
    }
    
    
    tunit-test-error tooManyArgs {
        
        exit 1 2
        
        tunit-assert [catch { error "One" "Two" } msg]
        tunit-assert [matches? ".*message.*" $msg]
    }
    
    
    tunit-test-error invalidArgType {
        
        exit "hello"
    }
    
    
    tunit-test allOk {
        
        test-exit-with ( 321 ) 321
    }
    
    
    define test-exit-with ( argList expectedValue ) {
        
        define myVar  $null
        define result $null
        define status \
                [catch { apply exit $argList ; set! myVar "Oops" } result] 
        
        tunit-assert [not $status]
        tunit-assert-equals $expectedValue $result
        tunit-assert-null $myVar
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite foreach-test {
    
    
    tunit-test-error tooFewArgs {
        
        foreach
    }
    
    
    tunit-test-error tooManyArgs {
        
        foreach myVar ( 1 ) {} 3
    }
    
    
    tunit-test hideVar {
        
        define myVar 314
        
        foreach myVar ( 123 ) {
            tunit-assert-equals 123 $myVar
        }
        
        tunit-assert-equals $myVar 314
    }
    
    
    tunit-test allOk {
        
        define myList ( 1 2 3 one two three)
        define head   $myList
        
        foreach myVar $myList {
            define item [car $head]
            set! head [cdr $head]
            
            tunit-assert-equals $item $myVar
        }
    }
    
    
    tunit-test withBreak {
        
        define myList   ( 1 2 3 4 5 6 7 8 9 10 )
        define maxCount 3
        define counterA 0
        define counterB 0 
        
        foreach myVar $myList {
            ++ counterA
            if { == $counterB $maxCount } {
                break
            }
            ++ counterB
        }
        
        tunit-assert-equals $maxCount $counterB
        tunit-assert-equals [+ 1 $maxCount] $counterA
    }
    
    
    tunit-test withContinue {
        
        define myList   ( 1 2 3 4 5 6 7 8 9 10 )
        define maxCount 3
        define counterA 0
        define counterB 0 
        
        foreach myVar $myList {
            ++ counterA
            if { == $counterB $maxCount } {
                continue
            }
            ++ counterB
        }
        
        tunit-assert-equals $maxCount $counterB
        tunit-assert-equals [length $myList] $counterA
    }
    
    
    tunit-test withLists {
        
        testListSize ()
        testListSize ( 1 )
        testListSize ( 1 2 )
        testListSize ( 1 2 3 )
        testListSize ( 1 2 3 4 )
        testListSize ( 1 2 3 4 "five" six seven )
    }
    
    
    define testListSize ( myList ) {
        
        define listSize [length $myList]
        define counter  0
        
        foreach myVar $myList {
            tunit-assert-equals [nth $myList $counter] $myVar
            ++ counter
        }
        
        tunit-assert-equals $listSize $counter
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite get-test {
    
    
    tunit-test-error tooFewArgs {
        
        get
    }
    
    
    tunit-test-error tooManyArgs {
        
        get one two three
    }
    
    
    tunit-test-error invalidArgType {
        
        get 1
    }
    
    
    tunit-test-error undefinedVar {
        
        get NON_DEFINED_VAR
    }
    
    
    tunit-test allOk {
        
        define myVar 123
        
        tunit-assert-equals 123 $myVar
    }
    
    
}





###########################################################################
#
# 
#
###########################################################################

tunit-testsuite if-test {
    
    
    tunit-test-error tooFewArgs0 {
        
        if
    }
    
    
    tunit-test-error tooFewArgs1 {
        
        if $true
    }
    
    
    tunit-test-error tooManyArgs {
        
        if $true 1 2 3
    }
    
    
    tunit-test-error invalidArgType {
        
        if what 1
    }
    
    
    tunit-test-error invalidContionBlock {
        
        if { is 1 } 2
    }
    
    
    tunit-test boolValueCondition {
        
        assert-if-result ( $true 10 ) 10
        assert-if-result ( $true 10 20 ) 10
        assert-if-result ( $false 10 ) $null
        assert-if-result ( $false 10 20 ) 20
    }
    
    
    tunit-test boolBlockCondition {
        
        assert-if-result ( {is $true} 10 ) 10
        assert-if-result ( {is $true} 10 20 ) 10
        assert-if-result ( {is $false} 10 ) $null
        assert-if-result ( {is $false} 10 20 ) 20
    }
    
    
    tunit-test resultIsBlock {
        
        assert-if-result ( $true {is 10} ) 10
        assert-if-result ( $true {is 10} {is 20} ) 10
        assert-if-result ( $false {is 10} ) $null
        assert-if-result ( $false {is 10} {is 20} ) 20
    }
    
    
    define assert-if-result ( ifArgs expectedResult ) {
        
        define result [apply if $ifArgs]
        tunit-assert [same? $expectedResult $result]
    }
    
    
}

