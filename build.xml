<!--

Copyright (c) 2010-2011 PDM&FC, All Rights Reserved.


Main Ant build file for the Tea development tree.

For setup instructions, please read the 00README-developers.txt

-->

<project name="Tea" default="all">

  <description>
    Tea build environment.
  </description>





  <!-- Defines global properties BUILD_* used througout the build. -->

  <property file="config/tea-core.conf" />
  <property name="BUILD_VERSION" value="${TEA_VERSION}" />









  <!-- Public targets. -->

  <target name="all" depends="jar.build" />

  <target name="test" depends="test.build" />

  <target name="doc" depends="javadoc.build, teadoc.build" />
  <target name="doc.clean" depends="javadoc.clean, teadoc.clean" />

  <target name="javadoc" depends="javadoc.build" />

  <target name="teadoc" depends="teadoc.build" />

  <target name="clean" depends="jar.clean, test.clean, doc.clean" />

  <target name="release" depends="release.build" />





  <!-- Tea jar -->

  <property name="jar.name" value="tea-${BUILD_VERSION}.jar" />
  <property name="jar.dir" location="lib/jars" />
  <property name="jar.file" value="${jar.dir}/${jar.name}" />
  <property name="jar.basedir" location="target/classes" />

  <target
     name="jar.build"
     depends="java.build,
              resources.build,
              tea.build">
    <mkdir dir="${jar.dir}" />
    <jar
       destfile="${jar.file}"
       basedir="${jar.basedir}"
       manifest="config/JarManifest">
      <metainf dir="${resources.source.dir}/META-INF" />
    </jar>
  </target>

  <target name="jar.clean" depends="java.clean, resources.clean, tea.clean">
    <delete>
      <fileset dir="${jar.dir}" includes="tea-*.jar" />
    </delete>
  </target>





  <!-- Compile Java source -->

  <property name="java.source.dir" location="src/main/java" />
  <property name="java.target.dir" location="target/classes" />

  <target name="java.build">
    <java-compile srcdir="${java.source.dir}" destdir="${java.target.dir}" />
  </target>

  <target name="java.clean">
    <delete dir="${java.target.dir}" />
  </target>





  <!-- Resources -->

  <property name="resources.source.dir" location="src/main/resources" />
  <property name="resources.target.dir" location="target/classes/" />

  <target name="resources.build">
    <mkdir dir="${resources.target.dir}" />
    <copy-from-template
       file="${resources.source.dir}/com/pdmfc/tea/TeaConfig.properties"
       tofile="${resources.target.dir}/com/pdmfc/tea/TeaConfig.properties" />
  </target>

  <target name="resources.clean">
    <delete dir="${resources.target.dir}" />
  </target>





  <!-- Copy Tea source files. -->

  <property name="tea.source.dir" location="src/main/tea" />
  <property name="tea.target.dir" location="target/classes/lib/tea-${BUILD_VERSION}" />

  <target name="tea.build">
    <mkdir dir="${tea.target.dir}" />
    <copy todir="${tea.target.dir}">
      <fileset dir="${tea.source.dir}">
        <include name="**/*.tea" />
      </fileset>
    </copy>
  </target>

  <target name="tea.clean">
    <delete dir="${tea.target.dir}" />
  </target>





  <!-- Perform tests. -->

  <target
     name="test.build"
     depends="jar.build, java-test.build, resources-test.build">
    <junit haltonerror="yes" haltonfailure="yes" showoutput="yes">
      <classpath>
        <pathelement location="${java-test.target.dir}" />
        <pathelement path="${jar.file}" />
        <pathelement path="${BUILD_JUNIT_JAR}" />
      </classpath>
      <formatter type="plain" usefile="no" />
      <batchtest>
        <fileset dir="${java-test.source.dir}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test.clean" depends="java-test.clean, resources-test.clean" />





  <!-- Compile tests. -->

  <property name="java-test.source.dir" location="src/test/java" />
  <property name="java-test.target.dir" location="target/test-classes" />

  <target
     name="java-test.build"
     depends="java-test.config.file.check,
              java-test.config.file.read,
              java-test.config.file.warn,
              java-test.config.create">
    <java-compile
       srcdir="${java-test.source.dir}"
       destdir="${java-test.target.dir}">
      <javac-classpath>
        <pathelement path="${jar.file}" />
        <pathelement path="${BUILD_JUNIT_JAR}" />
      </javac-classpath>
    </java-compile>
  </target>

  <!-- checking for the presence of configuration specifying JUnit libraries -->
  <target name="java-test.config.file.check">
    <condition property="java-test.config.file.exists">
      <available file="build.conf" />
    </condition>
  </target>

  <!-- read the properties in build.conf and check BUILD_JUNIT_JAR -->
  <target name="java-test.config.file.read" if="java-test.config.file.exists">
    <property file="build.conf" />
    <condition property="java-test.config.file.defined">
      <and>
        <isset property="BUILD_JUNIT_JAR" />
      </and>
    </condition>
  </target>

  <target
     name="java-test.config.file.warn"
     if="java-test.config.file.exists"
     unless="java-test.config.file.defined">

    <fail>File build.conf must define a BUILD_JUNIT_JAR property with the classpath of valid JUnit jars.  Example: BUILD_JUNIT_JAR=/opt/junit/jars/junit-4.8.2.jar;/opt/junit/jars/junit-hamcrest.4.8.2.jar
If you remove the build.conf file, ant will setup one for you using the JUnit libraries distributed with this package.</fail>
  </target>

  <!-- extract JUnit libraries from the source release -->
  <target name="java-test.config.create" unless="java-test.config.file.exists">
    <property name="devtools.jars.dir" location="devtools/lib/jars" />
    <unzip src="third-party/junit4.8.2.zip" dest="${java.io.tmpdir}/${user.name}/">
      <patternset>
        <include name="junit4.8.2/junit-4.8.2.jar" />
      </patternset>
    </unzip>
    <mkdir dir="${devtools.jars.dir}" />
    <property name="BUILD_JUNIT_JAR" value="${devtools.jars.dir}/junit-4.8.2.jar" />
    <move
       file="${java.io.tmpdir}/${user.name}/junit4.8.2/junit-4.8.2.jar"
       tofile="${BUILD_JUNIT_JAR}" />
    <delete dir="${java.io.tmpdir}/${user.name}/junit4.8.2" />
    <delete file="build.conf" />
    <echoproperties destfile="build.conf" failonerror="true" regex="BUILD_JUNIT_JAR" />
  </target>

  <target name="java-test.clean">
    <delete dir="${java-test.target.dir}" />
  </target>





  <!-- Test resources. -->

  <property name="resources-test.source.dir" location="src/test/resources" />
  <property name="resources-test.target.dir" location="target/test-classes/" />

  <target name="resources-test.build">
    <mkdir dir="${resources-test.target.dir}" />

    <copy todir="${resources-test.target.dir}">
      <fileset dir="${resources-test.source.dir}">
        <!-- copy all test resource files, not just one -->
        <!-- filename name="com/pdmfc/tea/compiler/StringLiteralTests.txt" / -->
      </fileset>
    </copy>

  </target>

  <target name="resources-test.clean">
    <delete dir="${resources-test.target.dir}" />
  </target>





  <!-- Javadoc related targets. -->

  <property name="javadoc.source.dir" value="${java.source.dir}" />
  <property name="javadoc.target.dir" location="doc/javadoc" />

  <property name="javadoc.doctitle" value="Tea ${BUILD_VERSION} Java Runtime API" />
  <property name="javadoc.windowtitle" value="${javadoc.doctitle}" />

  <target name="javadoc.build">
    <mkdir dir="${javadoc.target.dir}" />
    <copy file="doc/images/LogoSmallPdmfc.png" todir="${javadoc.target.dir}" />

    <javadoc
       sourcepath="${javadoc.source.dir}"
       destdir="${javadoc.target.dir}"
       useexternalfile="yes"
       nodeprecatedlist="yes"
       author="true"
       splitindex="true"
       version="true"
       use="true"
       doctitle="${javadoc.doctitle}"
       windowtitle="${javadoc.windowtitle}"
       verbose="true">
      <header><![CDATA[<b>Tea Java Runtime API</b><br /><b>Version ${BUILD_VERSION}</b>]]></header>
      <bottom><![CDATA[<font size="-1">&copy; 2011 <a href="http://www.pdmfc.com" target="_blank"><img align="absmiddle" border="0" src="LogoSmallPdmfc.png" alt="PDM&amp;FC"></a>]]></bottom>
    </javadoc>
  </target>

  <target name="javadoc.clean">
    <delete dir="${javadoc.target.dir}" />
  </target>





  <!-- Teadoc related targets. -->

  <property name="teadoc.source.dir" location="src/main" />
  <property name="teadoc.target.dir" location="doc/teadoc" />

  <property name="teadoc.script.library" location="apps/teadoc/lib/tea" />
  <property name="teadoc.script" location="${teadoc.script.library}/doc-html.tea" />
  <property name="teadoc.header" value="Tea ${BUILD_VERSION} Reference Documentation&lt;br&gt;&amp;copy; 2011 &lt;a href=&quot;http://www.pdmfc.com&quot;&gt;PDM&amp;amp;FC&lt;/a&gt;" />
  <property name="teadoc.footer" value="${teadoc.header}" />
  <property name="teadoc.bottom" value="&lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;mailto:info@pdmfc.com&quot;&gt;Report a bug or request new features&lt;/a&gt;&lt;/font&gt;&lt;br /&gt;&lt;font size=&quot;-1&quot;&gt;&amp;copy; 2011&lt;/font&gt; &lt;a href=&quot;http://www.pdmfc.com&quot;&gt;&lt;img align=&quot;absmiddle&quot; border=&quot;0&quot; src=&quot;LogoSmallPdmfc.png&quot;&gt;&lt;/a&gt;" />
  <property name="teadoc.doctitle" value="Tea ${BUILD_VERSION} Reference Documentation" />
  <property name="teadoc.windowtitle" value="${teadoc.doctitle}" />
  <property name="teadoc.pathlist" value="${teadoc.source.dir}" />
  <property name="teadoc.outputdir" value="${teadoc.target.dir}" />

  <target name="teadoc.build" depends="jar.build">
    <mkdir dir="${teadoc.target.dir}" />
    <copy file="doc/images/LogoSmallPdmfc.png" todir="${teadoc.target.dir}" />

    <java jar="${jar.file}" fork="true" failonerror="yes">
      <arg value="--script=${teadoc.script}" />
      <arg value="--library=${teadoc.script.library}" />
      <arg value="--" />
      <arg value="--header=${teadoc.header}" />
      <arg value="--footer=${teadoc.footer}" />
      <arg value="--bottom=${teadoc.bottom}" />
      <arg value="--doc-title=${teadoc.doctitle}" />
      <arg value="--window-title=${teadoc.windowtitle}" />
      <arg value="--path-list=${teadoc.pathlist}" />
      <arg value="--output-dir=${teadoc.outputdir}" />
    </java>

  </target>

  <target name="teadoc.clean">
    <delete dir="${teadoc.target.dir}" />
  </target>




  <!-- release related targets. -->

  <property name="release.dir" location="target" />
  <property name="release.basename" value="tea-${BUILD_VERSION}" />

  <target name="release.build" depends="all, doc">
    <mkdir dir="${release.dir}" />
    <delete file="${release.dir}/${release.basename}.tar.gz" />
    <tar
       destfile="${release.dir}/${release.basename}.tar.gz"
       compression="gzip">

      <!-- does not preserve permissions? - tarfileset for executables -->
      <tarfileset
         dir="."
         prefix="tea-${BUILD_VERSION}"
         followsymlinks="no"
         defaultexcludes="yes"
         filemode="755">
        <include name="bin/tsh" />
        <include name="bin/setup" />
        <include name="bin/teadoc" />
      </tarfileset>

      <tarfileset
         dir="."
         prefix="tea-${BUILD_VERSION}"
         followsymlinks="no"
         defaultexcludes="yes">
        <include name="00README.txt" />
        <include name="COPYING.txt" />
        <include name="LICENSE.txt" />
        <include name="apps/**" />
        <include name="config/tea-core.conf" />
        <include name="config/tea-install.conf.template" />
        <include name="bin/tea-utils" />
        <include name="bin/tsh.bat" />
        <include name="doc/javadoc/**" />
        <include name="doc/release-notes.txt" />
        <include name="doc/teadoc/**" />
        <include name="doc/tea-mode.el" />
        <include name="doc/Memos/Faq.txt" />
        <include name="lib/jars/tea-*.jar" />
      </tarfileset>
    </tar>

    <delete file="${release.dir}/${release.basename}-src.tar.gz" />

    <tar
       destfile="${release.dir}/${release.basename}-src.tar.gz" compression="gzip">
      <!-- does not preserve permissions? - tarfileset for executables -->
      <tarfileset
         dir="."
         prefix="tea-${BUILD_VERSION}"
         followsymlinks="no"
         defaultexcludes="yes"
         filemode="755">
        <include name="bin/tsh" />
        <include name="bin/setup" />
        <include name="bin/teadoc" />
        <include name="devtools/bin/**" />
      </tarfileset>

      <tarfileset
         dir="."
         prefix="tea-${BUILD_VERSION}"
         followsymlinks="no"
         defaultexcludes="yes">
        <!-- exclude executables -->
        <exclude name="bin/setup" />
        <exclude name="bin/teadoc" />
        <exclude name="bin/tsh" />
        <exclude name="devtools/bin/**" />
        <!-- exclude config files -->
        <exclude name="Makefile.conf" />
        <exclude name="build.conf" />
        <!-- exclude compiled files and extracted devtools -->
        <exclude name="build/**" />
        <exclude name="target/**" />
        <exclude name="lib/jars/**" />
        <exclude name="doc/javadoc/**" />
        <exclude name="doc/teadoc/**" />
        <exclude name="devtools/apache-ant*/**" />
        <exclude name="devtools/lib/**" />
        <!-- exclude IDE files -->
        <exclude name="eclipsews/**" />
        <exclude name=".classpath" />
        <exclude name=".project" />
        <exclude name="nbproject/**" />
      </tarfileset>
    </tar>
  </target>





<!-- 

Only utility tasks bellow this point.

-->





  <!-- Compiles Java sources. -->

  <macrodef name="java-compile">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <element name="javac-classpath" optional="yes" />
    <sequential>
      <mkdir dir="@{destdir}" />
      <javac
         srcdir="@{srcdir}"
         destdir="@{destdir}"
         source="1.6"
         nowarn="false"
         debug="yes"
         includeantruntime="no">
        <compilerarg value="-Xlint" />
        <compilerarg value="-Xlint:-serial" />
        <classpath>
          <javac-classpath />
        </classpath>
      </javac>
    </sequential>
  </macrodef>





  <!-- Generates a target file from a template. -->

  <macrodef name="copy-from-template">
    <attribute name="file" />
    <attribute name="tofile" />
    <sequential>
      <copy file="@{file}" tofile="@{tofile}" verbose="true">
        <filterchain>
          <striplinecomments>
            <comment value="%%" />
          </striplinecomments>
          <expandproperties/>
        </filterchain>
        <filterset begintoken="$${" endtoken="}">
        </filterset>
      </copy>
    </sequential>
  </macrodef>






</project>

